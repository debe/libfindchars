package ${packagename};

import java.lang.foreign.MemorySegment;
import java.lang.foreign.ValueLayout;
import java.nio.ByteOrder;
import java.util.Arrays;

import org.knownhosts.libfindchars.api.MatchStorage;
import org.knownhosts.libfindchars.api.MatchView;

import jdk.incubator.vector.VectorOperators;
import jdk.incubator.vector.VectorShape;
import jdk.incubator.vector.ByteVector;
import jdk.incubator.vector.IntVector;


public class ${engineClassName} {

    private static int INT_BATCH_SIZE = VectorShape.preferredShape().vectorBitSize() / Integer.SIZE;
    private byte[] literalCacheSparse = new byte[IntVector.SPECIES_PREFERRED.vectorByteSize()];
    private int[] positionCache = new int[INT_BATCH_SIZE];


    #foreach( $op in $ops )
        #set( $count = $foreach.count )
        #parse($op.getFieldsTpl())
    #end 
            
    public ${engineClassName}() {
        initialize();
    }
    
    void initialize() {
        #foreach( $op in $ops )
            #set( $count = $foreach.count )
            #parse($op.getInitTpl())
        #end 
    }

    public MatchView find(MemorySegment mappedFile, MatchStorage matchStorage) {
        var vectorByteSize = ByteVector.SPECIES_PREFERRED.vectorByteSize();
        var fileOffset = 0;
        var globalCount = 0;
        
        for (int i = 0; i < ((int)mappedFile.byteSize() - vectorByteSize);
                i = i + vectorByteSize) {
            var accumulator = ByteVector.SPECIES_PREFERRED.zero();
            matchStorage.ensureSize(ByteVector.SPECIES_PREFERRED.elementSize(), 1, globalCount);
            
            var inputVec = ByteVector.fromMemorySegment(ByteVector.SPECIES_PREFERRED, mappedFile, i, ByteOrder.nativeOrder()); 

	        #foreach( $op in $ops )
	            #set( $count = $foreach.count )
	            #parse($op.getInlineTpl())
	            
	        #end 

#parse("templates/MatchDecoder.vm")
            
            globalCount += count;
            fileOffset += vectorByteSize;
        }
        
        // last chunk
        var accumulator = ByteVector.SPECIES_PREFERRED.zero();
        byte[] lastChunkPadded = new byte[vectorByteSize];
        MemorySegment.copy(mappedFile, ValueLayout.JAVA_BYTE, fileOffset,lastChunkPadded,0,(int)mappedFile.byteSize() - fileOffset);
        matchStorage.ensureSize(ByteVector.SPECIES_PREFERRED.elementSize(), 1, globalCount);
        var inputVec = ByteVector.fromArray(ByteVector.SPECIES_PREFERRED, lastChunkPadded, 0); 

        #foreach( $op in $ops )
            #set( $count = $foreach.count )
            #parse($op.getInlineTpl())
            
        #end 
#parse("templates/MatchDecoder.vm")
        globalCount+=count;
        
        return new MatchView(globalCount);

    }

       
}
